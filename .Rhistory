.by=c("name", "metric")) |>
pivot_wider(id_cols=c(obstime, metric), names_from="name", values_from="valuereg")
data <- data |>
pivot_longer(cols=names(metrics), names_to="metric", values_to="value") |>
reframe(data.frame(obstime=obstime,
valuereg=approx(x= local_date_time_full,
y =value,
xout = obstime)$y),
.by=c("name", "metric")) |>
pivot_wider(id_cols=c(obstime, metric), names_from="name", values_from="valuereg")
extract_signal <- function(data, metric) {
# Apply multivariate optimisation and trend filter to each metric
data.m <- data |>
data.frame(row.names = "obstime") |>
data.matrix()
fit <- dlmMLE(data.m, parm=log(c(5,5,5)), build = fn, hessian = TRUE)
fitf <- dlmFilter(data.m, fn(fit$par))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
dplyr::mutate(TrendCI = map_vec(fitf.conf[-1], \(x) sqrt(x[1,1]))) }
fn <- function(parm) {
# Optimal parameter update function
mod <- dlm(
FF=matrix(c(1,1,1,1,0,0,0,0), ncol=2, byrow=FALSE),
V=diag(exp(rep(parm[1], 4))),
GG=dlmModTrig(s=24*2, q=1)$GG,
W=diag(exp(parm[2:3])),
m0=c(0,0),
C0=diag(c(1,1)))
return(mod) }
data |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric))) |>
unnest(trend) |>
select(-data) |>
mutate(metric = metrics[metric])
quarto::quarto_render("docs/index.qmd")
library(tidyverse)
library(jsonlite)
library(RCurl)
library(dlm)
stations <- c("Avalon"="94854",
"Essendon"="95866",
"Frankston"="94876",
"Viewbank"="95874")
get_station_data <- function(id) {
url <- paste0("http://www.bom.gov.au/fwo/IDV60901/IDV60901.", id, ".json")
rawdata <- RCurl::getURL(url, ssl.verifypeer = FALSE)
data <- jsonlite::fromJSON(rawdata)$observations$data |>
dplyr::mutate(local_date_time_full = as.POSIXct(local_date_time_full,
format = "%Y%m%d%H%M%S",
tz="Australia/Melbourne")) }
data <- purrr::imap_dfr(stations,
\(x,y) get_station_data(x) |> dplyr::mutate(name=y))
metrics <- c("air_temp"="Temperature (C)",
"wind_spd_kmh"="Wind Speed (km/h)",
"press"="Pressure (hPa)",
"rel_hum"="Relative Humidity (%)")
obstime <- seq(min(data$local_date_time_full),
max(data$local_date_time_full),
by="30 mins",
tz="Australia/Melbourne")
data <- data |>
pivot_longer(cols=names(metrics), names_to="metric", values_to="value") |>
reframe(data.frame(obstime=obstime,
valuereg=approx(x= local_date_time_full,
y =value,
xout = obstime)$y),
.by=c("name", "metric")) |>
pivot_wider(id_cols=c(obstime, metric), names_from="name", values_from="valuereg")
# Multivariate signal -----
fn <- function(parm) {
# Optimal parameter update function
mod <- dlm(
FF=matrix(c(1,1,1,1,0,0,0,0), ncol=2, byrow=FALSE),
V=diag(exp(rep(parm[1], 4))),
GG=dlmModTrig(s=24*2, q=1)$GG,
W=diag(exp(parm[2:3])),
m0=c(0,0),
C0=diag(c(1,1)))
return(mod) }
extract_signal <- function(data, metric) {
# Apply multivariate optimisation and trend filter to each metric
data.m <- data |>
data.frame(row.names = "obstime") |>
data.matrix()
fit <- dlmMLE(data.m, parm=log(c(5,5,5)), build = fn, hessian = TRUE)
fitf <- dlmFilter(data.m, fn(fit$par))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
dplyr::mutate(TrendCI = map_vec(fitf.conf[-1], \(x) sqrt(x[1,1]))) }
data |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric))) |>
unnest(trend) |>
select(-data) |>
mutate(metric = metrics[metric])  -> a
a
ggplot(a, aes(x=obstime, y=Cycle)) + geom_line()
ggplot(a, aes(x=obstime, y=Cycle)) + geom_line() + facet_wrap(vars(metric))
ggplot(a, aes(x=obstime, y=Cycle)) + geom_line() + facet_wrap(vars(metric), scales="free_y")
data
data |> filter(metric=="air_temp")
data |> filter(metric=="air_temp")  -> data
data.m <- data |>
data.frame(row.names = "obstime") |>
data.matrix()
data.m
data.m <- data |>
select(-metric) |>
data.frame(row.names = "obstime") |>
data.matrix()
data.m
fn <- function(parm) {
# Optimal parameter update function
mod <- dlm(
FF=matrix(c(1,1,1,1,0,0,0,0), ncol=2, byrow=FALSE),
V=diag(exp(rep(parm[1], 4))),
GG=dlmModTrig(s=24*2, q=1)$GG,
W=diag(exp(parm[2:3])),
m0=c(0,0),
C0=diag(c(1,1)))
return(mod) }
fit <- dlmMLE(data.m, parm=log(c(5,5,5)), build = fn, hessian = TRUE)
fit
fitf <- dlmFilter(data.m, fn(fit$par))
fitf
fn(fit$par)
dlmModPoly() + dlmModTrig(4)
dlmModTrig(4)
?dlmModTrig
dlmModTrig(12)
dlmModTrig(s=4)
dlmModTrig(s=4, q=1)
dlmModTrig(s=12, q=1)
x <- sin(1:30)
x
fn(fit$par)
?sine
?sin
asin(0.9914449)
2*pi()
2*pi
2*pi/asin(0.9914449)
2*pi/acos(0.9914449)
2*pi/asin(0.1305262)
fitf
fitf$m
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) -> a
head(a)
a |> mutate(Fit = Trend + Cycle) |> ggplot(a, aes(x=obstime, y=Fit)) + geom_line()
a |> mutate(Fit = Trend + Cycle) |> ggplot(aes(x=obstime, y=Fit)) + geom_line()
a |> mutate(Fit = Trend + Cycle) |> ggplot(aes(x=obstime, y=Fit)) + geom_line() + geom_line(aes(y=Trend))
a |> mutate(Fit = Trend + Cycle) |> ggplot(aes(x=obstime, y=Fit)) + geom_line() + geom_line(aes(y=Trend), col="red")
a |> mutate(Fit = Trend + Cycle) |> ggplot(aes(x=obstime, y=Fit)) + geom_line() + geom_line(aes(y=Trend), col="red") + geom_line(aes(y=Avalong), col="blue")
a |> mutate(Fit = Trend + Cycle) |> ggplot(aes(x=obstime, y=Fit)) + geom_line() + geom_line(aes(y=Trend), col="red") + geom_line(aes(y=Avalon), col="blue")
fn(fit)
fn(fit$par)
fn(fit$par)$GG
fitf$m
fitf$m %*% fn(fit$par)$GG
fitf$m[,2]
fitf$m[,2]*-0.1305262
fitf$m[,2]*-0.1305262 |> plot(type="l")
fitf$m[,2]*-0.1305262 |> plot()
fitf$m[,2]*-0.1305262 |> tsplot()
plot(y=fitf$m[,2]*-0.1305262)
plot(y=fitf$m[,2]*-0.1305262, x=1:dim(fitf$m)[1])
plot(y=fitf$m[,2]*-0.1305262, x=1:dim(fitf$m)[1], type="l")
fn(fit$par)
fn(fit$par)$GG
fn(fit$par)$GG[2,1]
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
dplyr::mutate(Cycle = fn(fit$par)$GG[2,1]*Cycle) |>
dplyr::mutate(TrendCI = map_vec(fitf.conf[-1], \(x) sqrt(x[1,1])))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
dplyr::mutate(Cycle = fn(fit$par)$GG[2,1]*Cycle) |>
dplyr::mutate(TrendCI = map_vec(fitf.conf[-1], \(x) sqrt(x[1,1])))
unemp
unemp <- Rfunlib::get_abs_data("LF", "M13.3.1599.10+30.AUS.M")
renv::install("Rfunlib")
renv::install("gitlab::bizscisolve/Rfunlib")
unemp <- read.csv("~/Desktop/unemp.csv")
unemp
head(unemp )
dlmModTrig(s=12, q=1)$GG
unemp$Original
dlmModTrig(s=12, q=1)
?dlmModTrig
n <- function(parm) {
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2])) }
dlmMLE(unemp$Original, parm=log(c(1,1)), build = fn, hessian = TRUE)
fn <- function(parm) {
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2])) }
dlmMLE(unemp$Original, parm=log(c(1,1)), build = fn, hessian = TRUE)
fn(fit$par)
fitf <- dlmFilter(unemp$Original, fn(fit$par))
fitf
fitf$m
unemp |>
bind_cols(data.frame(dropFirst(fitf$m)))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X1))
str(unemp)
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X1), col="red")
fn(fit$par)
fn(fit$par)$GG[2,1]
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
X3 = X1 + X2*fn(fit$par)$GG[2,1]) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X3), col="red")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
X3 = X1 + X2*fn(fit$par)$GG[2,1]) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X2), col="red")
?dlmModPoly
fn <- function(parm) {
dlmModPoly(order=1) +
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2])) }
dlmModPoly(order=1) +
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2]))
parm <- log(c(1,1))
dlmModPoly(order=1) +
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2]))
fn <- function(parm) {
dlmModPoly(order=1, dV = exp(parm[1]), dW = exp(parm[2])) +
dlmModTrig(s=12, q=1, dV = exp(parm[3]), dW = exp(parm[4])) }
fit <- dlmMLE(unemp$Original, parm=log(c(1,1,1,1)), build = fn, hessian = TRUE)
fit
fn(fit$par)
fitf <- dlmFilter(unemp$Original, fn(fit$par))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m)))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X1), col="red")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
#geom_line(aes(y=Original)) +
geom_line(aes(y=X2), col="red")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
#geom_line(aes(y=Original)) +
geom_line(aes(y=X3), col="red")
fn <- function(parm) {
dlmModTrig(s=12, q=1, dV = exp(parm[1]), dW = exp(parm[2])) }
fit <- dlmMLE(unemp$Original, parm=log(c(1,1)), build = fn, hessian = TRUE)
fn(fit$par)
fitf <- dlmFilter(unemp$Original, fn(fit$par))
fitf
fitf$m
unemp |>
bind_cols(data.frame(dropFirst(fitf$m)))
fn(fit$par)$GG[1,1]
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
Row = 1:n(),
Amplitude = X1/cos(fn(fit$par)$GG[1,1]*Row))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
Row = row_number(),
Amplitude = X1/cos(fn(fit$par)$GG[1,1]*Row))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
Row = row_number(),
Amplitude = X2/cos(fn(fit$par)$GG[1,1]*Row))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
Row = row_number(),
Amplitude = X2/sin(fn(fit$par)$GG[2,1]*Row))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date),
Row = row_number(),
Amplitude = X2/sin(fn(fit$par)$GG[2,1]*Row)) |>
ggplot(aes(x=Date)) +
#geom_line(aes(y=Original)) +
geom_line(aes(y=Amplitude), col="red")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m)))
fn <- function(parm) {
dlmModPoly(1, dV=exp(parm[1]), dW=exp(parm[2])) +
dlmModTrig(s=12, q=1, dV = exp(parm[3]), dW = 0) }
fit <- dlmMLE(unemp$Original, parm=log(c(1,1)), build = fn, hessian = TRUE)
fit <- dlmMLE(unemp$Original, parm=log(c(1,1,1)), build = fn, hessian = TRUE)
fit
fitf <- dlmFilter(unemp$Original, fn(fit$par))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m)))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X1), col="red")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
//geom_line(aes(y=Original)) +
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
#geom_line(aes(y=Original)) +
geom_line(aes(y=X2), col="red") +
geom_line(aes(y=X3), col="blue")
fn <- function(parm) {
dlmModPoly(1, dV=exp(parm[1]), dW=exp(parm[2])) +
dlmModTrig(s=12, q=1, dV = exp(parm[3]), dW = exp(parm[4])) }
fit <- dlmMLE(unemp$Original, parm=log(c(1,1,1,1)), build = fn, hessian = TRUE)
fitf <- dlmFilter(unemp$Original, fn(fit$par))
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
#geom_line(aes(y=Original)) +
geom_line(aes(y=X2), col="red") +
geom_line(aes(y=X3), col="blue")
unemp |>
bind_cols(data.frame(dropFirst(fitf$m))) |>
mutate(Date = as.Date(Date)) |>
ggplot(aes(x=Date)) +
geom_line(aes(y=Original)) +
geom_line(aes(y=X1), col="red") +
geom_line(aes(y=X2), col="blue")
library(tidyverse)
library(jsonlite)
library(RCurl)
library(dlm)
stations <- c("Avalon"="94854",
"Essendon"="95866",
"Frankston"="94876",
"Viewbank"="95874")
get_station_data <- function(id) {
url <- paste0("http://www.bom.gov.au/fwo/IDV60901/IDV60901.", id, ".json")
rawdata <- RCurl::getURL(url, ssl.verifypeer = FALSE)
data <- jsonlite::fromJSON(rawdata)$observations$data |>
dplyr::mutate(local_date_time_full = as.POSIXct(local_date_time_full,
format = "%Y%m%d%H%M%S",
tz="Australia/Melbourne")) }
data <- purrr::imap_dfr(stations,
\(x,y) get_station_data(x) |> dplyr::mutate(name=y))
metrics <- c("air_temp"="Temperature (C)",
"wind_spd_kmh"="Wind Speed (km/h)",
"press"="Pressure (hPa)",
"rel_hum"="Relative Humidity (%)")
obstime <- seq(min(data$local_date_time_full),
max(data$local_date_time_full),
by="30 mins",
tz="Australia/Melbourne")
data2 <- data |>
pivot_longer(cols=names(metrics), names_to="metric", values_to="value") |>
reframe(data.frame(obstime=obstime,
valuereg=approx(x= local_date_time_full,
y =value,
xout = obstime)$y),
.by=c("name", "metric")) |>
pivot_wider(id_cols=c(obstime, metric), names_from="name", values_from="valuereg")
data2
fn(fit$par)
atrix(c(1,1,1,1,1,1,1,1,0,0,0,0), ncol=3, byrow=FALSE)
matrix(c(1,1,1,1,1,1,1,1,0,0,0,0), ncol=3, byrow=FALSE)
diag(exp(rep(parm[1], 4)))
(dlmModPoly(1) + dlmModTrig(s=24*2, q=1))
(dlmModPoly(1) + dlmModTrig(s=24*2, q=1))$GG
fn <- function(parm) {
# Optimal parameter update function
mod <- dlm(
FF=matrix(c(1,1,1,1,1,1,1,1,0,0,0,0), ncol=3, byrow=FALSE),
V=diag(exp(rep(parm[1], 4))),
GG=(dlmModPoly(1) + dlmModTrig(s=24*2, q=1))$GG,
W=diag(exp(parm[2:4])),
m0=c(0,0,0),
C0=diag(c(1,1,1)))
return(mod) }
data2
data2 |> filter(metric=="air_temp")
data2 |> filter(metric=="air_temp") -> data2
data.m <- data2 |>
select(-metric) |>
data.frame(row.names = "obstime") |>
data.matrix()
data.m
fit <- dlmMLE(data.m, parm=log(c(1,1,1,1)), build = fn, hessian = TRUE)
fit
fitf <- dlmFilter(data.m, fn(fit$par))
fitf
data2 |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m)))
data2 |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m)))  -> a
ggplot(a, aes(x=obstime)) + geom_line(aes(y=X1))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line(aes(y=X1))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line()
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line() + geom_line(aes(y=Essendon))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line() + geom_line(aes(y=X1))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line() + geom_line(aes(y=X2))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line() + geom_line(aes(y=X3))
ggplot(a, aes(x=obstime, y=Essendon)) + geom_line() + geom_line(aes(y=X2))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
fitf.conf
fitf.conf[[1]]
fitf.conf[[3]]
diag(fitf.conf[[3]])
map_vec(fitf.conf[-1], \(x) sqrt(diag(x)))
map(fitf.conf[-1], \(x) sqrt(diag(x)))
map(fitf.conf[-1], \(x) sqrt(diag(x)[1:2]))
map(fitf.conf[-1], \(x) setNames(diag(x)[1:2], c("TrendVar", "CycleVar")))
map_dfr(fitf.conf[-1], \(x) setNames(diag(x)[1:2], c("TrendVar", "CycleVar")))
extract_signal <- function(data, metric) {
# Apply multivariate optimisation and trend filter to each metric
data.m <- data |>
select(-metric) |>
data.frame(row.names = "obstime") |>
data.matrix()
fit <- dlmMLE(data.m, parm=log(c(1,1,1,1)), build = fn, hessian = TRUE)
fitf <- dlmFilter(data.m, fn(fit$par))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
select(-X3) |>
bind_cols(map_dfr(fitf.conf[-1], \(x) setNames(diag(x)[1:2], c("TrendVar", "CycleVar"))))
}
data
data2 |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric))) |>
unnest(trend) |>
select(-data) |>
mutate(metric = metrics[metric]) -> a
data2
tail(data2)
data2 |>
nest_by(metric
)
data2 |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric)))
extract_signal <- function(data, metric) {
# Apply multivariate optimisation and trend filter to each metric
data.m <- data |>
data.frame(row.names = "obstime") |>
data.matrix()
fit <- dlmMLE(data.m, parm=log(c(1,1,1,1)), build = fn, hessian = TRUE)
fitf <- dlmFilter(data.m, fn(fit$par))
fitf.conf <- dlmSvd2var(fitf$U.C, fitf$D.C)
data |>
dplyr::bind_cols(data.frame(dropFirst(fitf$m))) |>
dplyr::rename(Trend=X1, Cycle=X2) |>
select(-X3) |>
bind_cols(map_dfr(fitf.conf[-1], \(x) setNames(diag(x)[1:2], c("TrendVar", "CycleVar"))))
}
data2 |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric)))
data2 |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric))) |>
unnest(trend) |>
select(-data)
data2 |>
nest_by(metric) |>
mutate(trend = list(extract_signal(data, metric))) |>
unnest(trend) |>
select(-data)  -> a
a |> ggplot(aes(x=obstime))+ geom_line(aes(y=Trend)) + geom_ribbon(aes(ymin=Trend - TrendVar, ymax=Trend + TrendVar))
a |> ggplot(aes(x=obstime))+ geom_line(aes(y=Trend)) + geom_ribbon(aes(ymin=Trend - TrendVar, ymax=Trend + TrendVar), alpha=0.2)
a |> ggplot(aes(x=obstime))+ geom_line(aes(y=Trend)) + geom_ribbon(aes(ymin=Trend - TrendVar, ymax=Trend + TrendVar), alpha=0.2) + geom_line(aes(y=Avalon)) + geom_line(aes(y=Essendon))
6*1200
library(tidyverse)
?nest_by
?unnest
?pivot_longer
?reframe
